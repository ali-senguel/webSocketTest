{"id":"../node_modules/react-use-websocket/dist/lib/attach-listener.js","dependencies":[{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-listener.js.map","includedInParent":true,"mtime":1679124831164},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/src/lib/attach-listener.ts","includedInParent":true,"mtime":1679124831172},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/package.json","includedInParent":true,"mtime":1679124831384},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/.babelrc","includedInParent":true,"mtime":1637703918124},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/package.json","includedInParent":true,"mtime":1679124831164},{"name":"./socket-io","loc":{"line":15,"column":26,"index":520},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-listener.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/socket-io.js"},{"name":"./constants","loc":{"line":16,"column":26,"index":562},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-listener.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/constants.js"},{"name":"./util","loc":{"line":17,"column":21,"index":599},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-listener.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/util.js"}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.attachListeners = void 0;\nvar socket_io_1 = require(\"./socket-io\");\nvar constants_1 = require(\"./constants\");\nvar util_1 = require(\"./util\");\nvar bindMessageHandler = function (webSocketInstance, optionsRef, setLastMessage) {\n    webSocketInstance.onmessage = function (message) {\n        optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n        if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n            return;\n        }\n        setLastMessage(message);\n    };\n};\nvar bindOpenHandler = function (webSocketInstance, optionsRef, setReadyState, reconnectCount) {\n    webSocketInstance.onopen = function (event) {\n        optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n        reconnectCount.current = 0;\n        setReadyState(constants_1.ReadyState.OPEN);\n    };\n};\nvar bindCloseHandler = function (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) {\n    if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        return function () { };\n    }\n    util_1.assertIsWebSocket(webSocketInstance);\n    var reconnectTimeout;\n    webSocketInstance.onclose = function (event) {\n        var _a, _b;\n        optionsRef.current.onClose && optionsRef.current.onClose(event);\n        setReadyState(constants_1.ReadyState.CLOSED);\n        if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n            var reconnectAttempts = (_a = optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n            if (reconnectCount.current < reconnectAttempts) {\n                reconnectTimeout = window.setTimeout(function () {\n                    reconnectCount.current++;\n                    reconnect();\n                }, (_b = optionsRef.current.reconnectInterval) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n            }\n            else {\n                optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n                console.warn(\"Max reconnect attempts of \" + reconnectAttempts + \" exceeded\");\n            }\n        }\n    };\n    return function () { return reconnectTimeout && window.clearTimeout(reconnectTimeout); };\n};\nvar bindErrorHandler = function (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) {\n    var reconnectTimeout;\n    webSocketInstance.onerror = function (error) {\n        var _a, _b;\n        optionsRef.current.onError && optionsRef.current.onError(error);\n        if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n            optionsRef.current.onClose && optionsRef.current.onClose(__assign(__assign({}, error), { code: 1006, reason: \"An error occurred with the EventSource: \" + error, wasClean: false }));\n            setReadyState(constants_1.ReadyState.CLOSED);\n            webSocketInstance.close();\n        }\n        if (optionsRef.current.retryOnError) {\n            if (reconnectCount.current < ((_a = optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT)) {\n                reconnectTimeout = window.setTimeout(function () {\n                    reconnectCount.current++;\n                    reconnect();\n                }, (_b = optionsRef.current.reconnectInterval) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n            }\n            else {\n                optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts);\n                console.warn(\"Max reconnect attempts of \" + optionsRef.current.reconnectAttempts + \" exceeded\");\n            }\n        }\n    };\n    return function () { return reconnectTimeout && window.clearTimeout(reconnectTimeout); };\n};\nexports.attachListeners = function (webSocketInstance, setters, optionsRef, reconnect, reconnectCount, sendMessage) {\n    var setLastMessage = setters.setLastMessage, setReadyState = setters.setReadyState;\n    var interval;\n    var cancelReconnectOnClose;\n    var cancelReconnectOnError;\n    if (optionsRef.current.fromSocketIO) {\n        interval = socket_io_1.setUpSocketIOPing(sendMessage);\n    }\n    bindMessageHandler(webSocketInstance, optionsRef, setLastMessage);\n    bindOpenHandler(webSocketInstance, optionsRef, setReadyState, reconnectCount);\n    cancelReconnectOnClose = bindCloseHandler(webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount);\n    cancelReconnectOnError = bindErrorHandler(webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount);\n    return function () {\n        setReadyState(constants_1.ReadyState.CLOSING);\n        cancelReconnectOnClose();\n        cancelReconnectOnError();\n        webSocketInstance.close();\n        if (interval)\n            clearInterval(interval);\n    };\n};\n","map":{"version":3,"file":"attach-listener.js","sourceRoot":"","sources":["../../src/lib/attach-listener.ts"],"names":[],"mappings":"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","sourcesContent":["import { MutableRefObject } from 'react';\nimport { setUpSocketIOPing } from './socket-io';\nimport {\n  DEFAULT_RECONNECT_LIMIT,\n  DEFAULT_RECONNECT_INTERVAL_MS,\n  ReadyState,\n  isEventSourceSupported,\n} from './constants';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { assertIsWebSocket } from './util';\n\nexport interface Setters {\n  setLastMessage: (message: WebSocketEventMap['message']) => void;\n  setReadyState: (readyState: ReadyState) => void;\n}\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: Setters['setLastMessage'],\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n    setLastMessage(message);\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnectCount: MutableRefObject<number>,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(ReadyState.OPEN);\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return () => {};\n  }\n  assertIsWebSocket(webSocketInstance);\n  let reconnectTimeout: number;\n\n  webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(ReadyState.CLOSED);\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      const reconnectAttempts = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n      if (reconnectCount.current < reconnectAttempts) {\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  let reconnectTimeout: number;\n\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    optionsRef.current.onError && optionsRef.current.onError(error);\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose({\n        ...error,\n        code: 1006,\n        reason: `An error occurred with the EventSource: ${error}`,\n        wasClean: false,\n      });\n\n      setReadyState(ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n    \n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < (optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT)) {\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts as number);\n        console.warn(`Max reconnect attempts of ${optionsRef.current.reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nexport const attachListeners = (\n    webSocketInstance: WebSocketLike,\n    setters: Setters,\n    optionsRef: MutableRefObject<Options>,\n    reconnect: () => void,\n    reconnectCount: MutableRefObject<number>,\n    sendMessage: SendMessage,\n  ): (() => void) => {\n  const { setLastMessage, setReadyState } = setters;\n\n  let interval: number;\n  let cancelReconnectOnClose: () => void;\n  let cancelReconnectOnError: () => void;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(\n    webSocketInstance,\n    optionsRef,\n    setLastMessage,\n  );\n\n  bindOpenHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnectCount,\n  );\n\n  cancelReconnectOnClose = bindCloseHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  cancelReconnectOnError = bindErrorHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  return () => {\n    setReadyState(ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\n"]}},"hash":"4803c6d091870bbd60671181c12b1668","cacheData":{"env":{}}}