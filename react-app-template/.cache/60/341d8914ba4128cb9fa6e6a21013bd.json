{"id":"../node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","dependencies":[{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js.map","includedInParent":true,"mtime":1679124831164},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/src/lib/attach-shared-listeners.ts","includedInParent":true,"mtime":1679124831172},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/package.json","includedInParent":true,"mtime":1679124831384},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/.babelrc","includedInParent":true,"mtime":1637703918124},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/package.json","includedInParent":true,"mtime":1679124831164},{"name":"./globals","loc":{"line":15,"column":24,"index":524},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/globals.js"},{"name":"./constants","loc":{"line":16,"column":26,"index":564},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/constants.js"},{"name":"./manage-subscribers","loc":{"line":17,"column":35,"index":615},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/manage-subscribers.js"},{"name":"./socket-io","loc":{"line":18,"column":26,"index":666},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/socket-io.js"}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.attachSharedListeners = void 0;\nvar globals_1 = require(\"./globals\");\nvar constants_1 = require(\"./constants\");\nvar manage_subscribers_1 = require(\"./manage-subscribers\");\nvar socket_io_1 = require(\"./socket-io\");\nvar bindMessageHandler = function (webSocketInstance, url) {\n    webSocketInstance.onmessage = function (message) {\n        manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n            if (subscriber.optionsRef.current.onMessage) {\n                subscriber.optionsRef.current.onMessage(message);\n            }\n            if (typeof subscriber.optionsRef.current.filter === 'function' &&\n                subscriber.optionsRef.current.filter(message) !== true) {\n                return;\n            }\n            subscriber.setLastMessage(message);\n        });\n    };\n};\nvar bindOpenHandler = function (webSocketInstance, url) {\n    webSocketInstance.onopen = function (event) {\n        manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n            subscriber.reconnectCount.current = 0;\n            if (subscriber.optionsRef.current.onOpen) {\n                subscriber.optionsRef.current.onOpen(event);\n            }\n            subscriber.setReadyState(constants_1.ReadyState.OPEN);\n        });\n    };\n};\nvar bindCloseHandler = function (webSocketInstance, url) {\n    if (webSocketInstance instanceof WebSocket) {\n        webSocketInstance.onclose = function (event) {\n            manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n                if (subscriber.optionsRef.current.onClose) {\n                    subscriber.optionsRef.current.onClose(event);\n                }\n                subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n            });\n            delete globals_1.sharedWebSockets[url];\n            manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n                var _a, _b;\n                if (subscriber.optionsRef.current.shouldReconnect &&\n                    subscriber.optionsRef.current.shouldReconnect(event)) {\n                    var reconnectAttempts = (_a = subscriber.optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n                    if (subscriber.reconnectCount.current < reconnectAttempts) {\n                        setTimeout(function () {\n                            subscriber.reconnectCount.current++;\n                            subscriber.reconnect.current();\n                        }, (_b = subscriber.optionsRef.current.reconnectInterval) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n                    }\n                    else {\n                        subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts);\n                        console.warn(\"Max reconnect attempts of \" + reconnectAttempts + \" exceeded\");\n                    }\n                }\n            });\n        };\n    }\n};\nvar bindErrorHandler = function (webSocketInstance, url) {\n    webSocketInstance.onerror = function (error) {\n        manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n            if (subscriber.optionsRef.current.onError) {\n                subscriber.optionsRef.current.onError(error);\n            }\n            if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n                subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose(__assign(__assign({}, error), { code: 1006, reason: \"An error occurred with the EventSource: \" + error, wasClean: false }));\n                subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n            }\n        });\n        if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n            webSocketInstance.close();\n        }\n    };\n};\nexports.attachSharedListeners = function (webSocketInstance, url, optionsRef, sendMessage) {\n    var interval;\n    if (optionsRef.current.fromSocketIO) {\n        interval = socket_io_1.setUpSocketIOPing(sendMessage);\n    }\n    bindMessageHandler(webSocketInstance, url);\n    bindCloseHandler(webSocketInstance, url);\n    bindOpenHandler(webSocketInstance, url);\n    bindErrorHandler(webSocketInstance, url);\n    return function () {\n        if (interval)\n            clearInterval(interval);\n    };\n};\n","map":{"version":3,"file":"attach-shared-listeners.js","sourceRoot":"","sources":["../../src/lib/attach-shared-listeners.ts"],"names":[],"mappings":"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","sourcesContent":["import { sharedWebSockets } from './globals';\nimport { DEFAULT_RECONNECT_LIMIT, DEFAULT_RECONNECT_INTERVAL_MS, ReadyState, isEventSourceSupported } from './constants';\nimport { getSubscribers } from './manage-subscribers';\nimport { MutableRefObject } from 'react';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { setUpSocketIOPing } from './socket-io';\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n\n      if (\n        typeof subscriber.optionsRef.current.filter === 'function' &&\n        subscriber.optionsRef.current.filter(message) !== true\n      ) {\n        return;\n      }\n\n      subscriber.setLastMessage(message);\n    });\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    getSubscribers(url).forEach(subscriber => {\n      subscriber.reconnectCount.current = 0;\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n\n      subscriber.setReadyState(ReadyState.OPEN);\n    });\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n      getSubscribers(url).forEach(subscriber => {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      });\n      \n      delete sharedWebSockets[url];\n  \n      getSubscribers(url).forEach(subscriber => {\n        if (\n          subscriber.optionsRef.current.shouldReconnect &&\n          subscriber.optionsRef.current.shouldReconnect(event)\n        ) {\n          const reconnectAttempts = subscriber.optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            setTimeout(() => {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, subscriber.optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts as number);\n            console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n          }\n        }\n      });\n    };\n  }\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n      if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose({\n          ...error,\n          code: 1006,\n          reason: `An error occurred with the EventSource: ${error}`,\n          wasClean: false,\n        });\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      }\n    });\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\n\nexport const attachSharedListeners = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  optionsRef: MutableRefObject<Options>,\n  sendMessage: SendMessage,\n) => {\n  let interval: number;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, url);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url);\n  bindErrorHandler(webSocketInstance, url);\n\n  return () => {\n    if (interval) clearInterval(interval);\n  };\n};\n"]}},"hash":"bfb3f3cf1c7abfb2efc9cf80c635b2bc","cacheData":{"env":{}}}