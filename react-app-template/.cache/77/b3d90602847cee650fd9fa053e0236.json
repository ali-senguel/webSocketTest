{"id":"../node_modules/react-use-websocket/dist/lib/create-or-join.js","dependencies":[{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/create-or-join.js.map","includedInParent":true,"mtime":1679124831164},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/src/lib/create-or-join.ts","includedInParent":true,"mtime":1679124831176},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/package.json","includedInParent":true,"mtime":1679124831384},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/.babelrc","includedInParent":true,"mtime":1637703918124},{"name":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/package.json","includedInParent":true,"mtime":1679124831164},{"name":"./globals","loc":{"line":4,"column":24,"index":138},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/create-or-join.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/globals.js"},{"name":"./constants","loc":{"line":5,"column":26,"index":178},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/create-or-join.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/constants.js"},{"name":"./attach-listener","loc":{"line":6,"column":32,"index":226},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/create-or-join.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-listener.js"},{"name":"./attach-shared-listeners","loc":{"line":7,"column":40,"index":288},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/create-or-join.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/attach-shared-listeners.js"},{"name":"./manage-subscribers","loc":{"line":8,"column":35,"index":353},"parent":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/create-or-join.js","resolved":"/home/sengul/Documents/Projects/Ltc/3dMDWebsocket/react-app-template/node_modules/react-use-websocket/dist/lib/manage-subscribers.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createOrJoinSocket = void 0;\nvar globals_1 = require(\"./globals\");\nvar constants_1 = require(\"./constants\");\nvar attach_listener_1 = require(\"./attach-listener\");\nvar attach_shared_listeners_1 = require(\"./attach-shared-listeners\");\nvar manage_subscribers_1 = require(\"./manage-subscribers\");\n//TODO ensure that all onClose callbacks are called\nvar cleanSubscribers = function (url, subscriber, optionsRef, setReadyState, clearSocketIoPingInterval) {\n    return function () {\n        manage_subscribers_1.removeSubscriber(url, subscriber);\n        if (!manage_subscribers_1.hasSubscribers(url)) {\n            try {\n                var socketLike = globals_1.sharedWebSockets[url];\n                if (socketLike instanceof WebSocket) {\n                    socketLike.onclose = function (event) {\n                        if (optionsRef.current.onClose) {\n                            optionsRef.current.onClose(event);\n                        }\n                        setReadyState(constants_1.ReadyState.CLOSED);\n                    };\n                }\n                socketLike.close();\n            }\n            catch (e) {\n            }\n            if (clearSocketIoPingInterval)\n                clearSocketIoPingInterval();\n            delete globals_1.sharedWebSockets[url];\n        }\n    };\n};\nexports.createOrJoinSocket = function (webSocketRef, url, setReadyState, optionsRef, setLastMessage, startRef, reconnectCount, sendMessage) {\n    if (!constants_1.isEventSourceSupported && optionsRef.current.eventSourceOptions) {\n        if (constants_1.isReactNative) {\n            throw new Error('EventSource is not supported in ReactNative');\n        }\n        else {\n            throw new Error('EventSource is not supported');\n        }\n    }\n    if (optionsRef.current.share) {\n        var clearSocketIoPingInterval = null;\n        if (globals_1.sharedWebSockets[url] === undefined) {\n            globals_1.sharedWebSockets[url] = optionsRef.current.eventSourceOptions ?\n                new EventSource(url, optionsRef.current.eventSourceOptions) :\n                new WebSocket(url, optionsRef.current.protocols);\n            webSocketRef.current = globals_1.sharedWebSockets[url];\n            setReadyState(constants_1.ReadyState.CONNECTING);\n            clearSocketIoPingInterval = attach_shared_listeners_1.attachSharedListeners(globals_1.sharedWebSockets[url], url, optionsRef, sendMessage);\n        }\n        else {\n            webSocketRef.current = globals_1.sharedWebSockets[url];\n            setReadyState(globals_1.sharedWebSockets[url].readyState);\n        }\n        var subscriber = {\n            setLastMessage: setLastMessage,\n            setReadyState: setReadyState,\n            optionsRef: optionsRef,\n            reconnectCount: reconnectCount,\n            reconnect: startRef,\n        };\n        manage_subscribers_1.addSubscriber(url, subscriber);\n        return cleanSubscribers(url, subscriber, optionsRef, setReadyState, clearSocketIoPingInterval);\n    }\n    else {\n        webSocketRef.current = optionsRef.current.eventSourceOptions ?\n            new EventSource(url, optionsRef.current.eventSourceOptions) :\n            new WebSocket(url, optionsRef.current.protocols);\n        setReadyState(constants_1.ReadyState.CONNECTING);\n        if (!webSocketRef.current) {\n            throw new Error('WebSocket failed to be created');\n        }\n        return attach_listener_1.attachListeners(webSocketRef.current, {\n            setLastMessage: setLastMessage,\n            setReadyState: setReadyState\n        }, optionsRef, startRef.current, reconnectCount, sendMessage);\n    }\n};\n","map":{"version":3,"file":"create-or-join.js","sourceRoot":"","sources":["../../src/lib/create-or-join.ts"],"names":[],"mappings":"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","sourcesContent":["import { MutableRefObject } from 'react';\nimport { sharedWebSockets } from './globals';\nimport { Options, SendMessage, Subscriber, WebSocketLike } from './types';\nimport { isEventSourceSupported, ReadyState, isReactNative } from './constants';\nimport { attachListeners } from './attach-listener';\nimport { attachSharedListeners } from './attach-shared-listeners';\nimport { addSubscriber, removeSubscriber, hasSubscribers } from './manage-subscribers';\n\n//TODO ensure that all onClose callbacks are called\n\nconst cleanSubscribers = (\n  url: string,\n  subscriber: Subscriber,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: (readyState: ReadyState) => void,\n  clearSocketIoPingInterval: (() => void) | null,\n) => {\n  return () => {\n    removeSubscriber(url, subscriber);\n    if (!hasSubscribers(url)) {\n      try {\n        const socketLike = sharedWebSockets[url];\n        if (socketLike instanceof WebSocket) {\n          socketLike.onclose = (event: WebSocketEventMap['close']) => {\n            if (optionsRef.current.onClose) {\n              optionsRef.current.onClose(event);\n            }\n            setReadyState(ReadyState.CLOSED);\n          };\n        }\n        socketLike.close();\n      } catch (e) {\n\n      }\n      if (clearSocketIoPingInterval) clearSocketIoPingInterval();\n\n      delete sharedWebSockets[url];\n    }\n  }\n};\n\nexport const createOrJoinSocket = (\n  webSocketRef: MutableRefObject<WebSocketLike | null>,\n  url: string,\n  setReadyState: (readyState: ReadyState) => void,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: (message: WebSocketEventMap['message']) => void,\n  startRef: MutableRefObject<() => void>,\n  reconnectCount: MutableRefObject<number>,\n  sendMessage: SendMessage,\n): (() => void) => {\n  if (!isEventSourceSupported && optionsRef.current.eventSourceOptions) {\n    if (isReactNative) {\n      throw new Error('EventSource is not supported in ReactNative');\n    } else {\n      throw new Error('EventSource is not supported');\n    }\n  }\n\n  if (optionsRef.current.share) {\n    let clearSocketIoPingInterval: ((() => void) | null) = null;\n    if (sharedWebSockets[url] === undefined) {\n      sharedWebSockets[url] = optionsRef.current.eventSourceOptions ?\n        new EventSource(url, optionsRef.current.eventSourceOptions) :\n        new WebSocket(url, optionsRef.current.protocols);\n      webSocketRef.current = sharedWebSockets[url];\n      setReadyState(ReadyState.CONNECTING);\n      clearSocketIoPingInterval = attachSharedListeners(\n        sharedWebSockets[url],\n        url,\n        optionsRef,\n        sendMessage,\n      );\n    } else {\n      webSocketRef.current = sharedWebSockets[url];\n      setReadyState(sharedWebSockets[url].readyState);\n    }\n\n    const subscriber: Subscriber = {\n      setLastMessage,\n      setReadyState,\n      optionsRef,\n      reconnectCount,\n      reconnect: startRef,\n    };\n  \n    addSubscriber(url, subscriber);\n\n    return cleanSubscribers(\n      url,\n      subscriber,\n      optionsRef,\n      setReadyState,\n      clearSocketIoPingInterval,\n    );\n  } else {\n    webSocketRef.current = optionsRef.current.eventSourceOptions ?\n      new EventSource(url, optionsRef.current.eventSourceOptions) :\n      new WebSocket(url, optionsRef.current.protocols);\n    setReadyState(ReadyState.CONNECTING);\n    if (!webSocketRef.current) {\n      throw new Error('WebSocket failed to be created');\n    }\n\n    return attachListeners(\n      webSocketRef.current,\n      {\n        setLastMessage,\n        setReadyState\n      },\n      optionsRef,\n      startRef.current,\n      reconnectCount,\n      sendMessage,\n    );\n  }\n};\n"]}},"hash":"4f3d9a13842727ea701d7bb00a29d2c5","cacheData":{"env":{}}}